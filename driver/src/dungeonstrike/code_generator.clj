(ns dungeonstrike.code-generator
  "Generates C# code for a strongly-typed implementation of the message
   specifications found in `messages.clj`"
  (:require [clojure.java.io :as io]
            [clojure.spec.alpha :as s]
            [clojure.string :as string]
            [dungeonstrike.messages :as messages]
            [dungeonstrike.paths :as paths]
            [camel-snake-kebab.core :as case]
            [clostache.parser :as templates]
            [mount.core :as mount]
            [dungeonstrike.dev :as dev]))
(dev/require-dev-helpers)

(def ^:private template
  "using System;
using System.Collections.Generic;

// =============================================================================
// WARNING: Do not modify this file by hand! This file is automatically
// generated by 'code_generator.clj' on driver startup from the message
// specifications found in 'messages.clj'. Refer to the documentation in those
// files for more information.
// =============================================================================

namespace DungeonStrike.Source.Messaging
{
    {{#enums}}
    public enum {{enumName}}
    {
        {{#values}}
        {{name}},
        {{/values}}
    }

    {{/enums}}
    {{#messages}}
    public sealed class {{messageName}}Message : Message
    {
        public static readonly string Type = \"{{messageName}}\";

        public {{messageName}}Message() : base(\"{{messageName}}\")
        {
        }

        {{#fields}}
        public {{&fieldType}} {{fieldName}} { get; set; }
        {{/fields}}
    }

    {{/messages}}
    {{#actions}}
    public sealed class {{actionName}}Action : UserAction
    {
        public static readonly string Type = \"{{actionName}}\";

        public {{actionName}}Action() : base(\"{{actionName}}\")
        {
        }

        {{#fields}}
        public {{&fieldType}} {{fieldName}} { get; set; }
        {{/fields}}
    }

    {{/actions}}

    public sealed class Messages
    {
        public static Message EmptyMessageForType(string messageType)
        {
            switch (messageType)
            {
                {{#messages}}
                case \"{{messageName}}\":
                    return new {{messageName}}Message();
                {{/messages}}
                default:
                    throw new InvalidOperationException(
                        \"Unrecognized message type: \" + messageType);
            }
        }
    }
}")

(defn- pascal-name
  "Returns the pascal-cased 'name' of this keyword"
  [keyword]
  (case/->PascalCase (name keyword)))

(defn- enum-info
  "Returns information about all enum messages."
  []
  (for [x messages/message-fields
        :let [k (key x)]
        :when (messages/is-enum-message-key? k)]
    {:enumName (pascal-name k)
     :values (for [v (messages/message-values k)]
               {:name (pascal-name v)})}))

(defn- csharp-field-type
  "Returns the C# type to use to represent a given message field."
  [field-name]
  (case (messages/field-type field-name)
    :integer
    "int"
    :string
    "string"
    :enum
    (pascal-name field-name)
    :map
    (pascal-name field-name)
    :seq
    (str "List<" (pascal-name (messages/seq-type field-name)) ">")
    (throw (RuntimeException.
            (str "Unknown type '" (messages/field-type field-name)
                 "' for field '" field-name "'")))))

(defn- template-parameters
  "Helper function which builds the parameters to the code generation template."
  []
  (let [message-field-params (fn [field-name]
                               {:fieldName (pascal-name field-name)
                                :fieldType (csharp-field-type field-name)})
        message-params (fn [[message-name fields]]
                         {:messageName (pascal-name message-name)
                          :fields (map message-field-params
                                       (remove #{:m/entity-id} fields))})
        action-field-params (fn [field-name]
                              {:fieldName (pascal-name field-name)
                               :fieldType (csharp-field-type field-name)})
        action-params (fn [[action-name fields]]
                        {:actionName (pascal-name action-name)
                         :fields (map action-field-params fields)})]
    {:messages (map message-params messages/messages)
     :actions (map action-params messages/actions)
     :enums (enum-info)}))

(defn- generate!
  "Generates C# code based on the message specifications found in
   `dungeonstrike.messages` and outputs it to the configured output file."
  []
  (let [output (templates/render template (template-parameters))]
    (spit paths/code-generator-output-path output)))

(mount/defstate ^:private code-generator :start (generate!))
