(ns dungeonstrike.code-generator
  "Generates C# code for a strongly-typed implementation of the message
   specifications found in `messages.clj`"
  (:require [clojure.java.io :as io]
            [clojure.spec.alpha :as s]
            [clojure.string :as string]
            [dungeonstrike.messages :as messages]
            [dungeonstrike.paths :as paths]
            [camel-snake-kebab.core :as case]
            [clostache.parser :as templates]
            [mount.core :as mount]
            [dungeonstrike.dev :as dev]))
(dev/require-dev-helpers)

(def ^:private template
  "using System;
using System.Collections.Generic;

// =============================================================================
// WARNING: Do not modify this file by hand! This file is automatically
// generated by 'code_generator.clj' on driver startup from the message
// specifications found in 'messages.clj'. Refer to the documentation in those
// files for more information.
// =============================================================================

namespace DungeonStrike.Source.Messaging
{
    {{#enums}}
    public enum {{enumName}}
    {
        {{#values}}
        {{name}},
        {{/values}}
    }

    {{/enums}}
    {{#messages}}
    public sealed class {{messageName}}Message : Message
    {
        public static readonly string Type = \"{{messageName}}\";

        public {{messageName}}Message() : base(\"{{messageName}}\")
        {
        }

        {{#fields}}
        public {{&fieldType}} {{fieldName}} { get; set; }
        {{/fields}}
    }

    {{/messages}}
    {{#actions}}
    public sealed class {{actionName}}Action : UserAction
    {
        public static readonly string Type = \"{{actionName}}\";

        public {{actionName}}Action() : base(\"{{actionName}}\")
        {
        }

        {{#fields}}
        public {{&fieldType}} {{fieldName}} { get; set; }
        {{/fields}}
    }

    {{/actions}}

    public sealed class Messages
    {
        public static Message EmptyMessageForType(string messageType)
        {
            switch (messageType)
            {
                {{#messages}}
                case \"{{messageName}}\":
                    return new {{messageName}}Message();
                {{/messages}}
                default:
                    throw new InvalidOperationException(
                        \"Unrecognized message type: \" + messageType);
            }
        }
    }
}")

(defn- enum-sets
  "Returns the set of all sets defined in the message specifications."
  []
  #{messages/scene-names messages/entity-types})

(defn- message-field-type
  "Returns the C# type to use to represent a given message field."
  [field-name]
  (let [spec (field-name messages/message-fields)]
    (cond
      (set? spec) (messages/enum-name-for-set spec)
      (= uuid? spec) "string"
      (= string? spec) "string"
      (= messages/position-spec spec) "Position"
      (= messages/position-coll-spec spec) "List<Position>"
      :otherwise (throw (RuntimeException. "Unknown Message Field Type")))))

(defn- action-field-type
  "Returns the C# type to use to represent a given action field."
  [field-name]
  (let [spec (field-name messages/action-fields)]
    (cond
      (= uuid? spec) "string"
      (= string? spec) "string"
      :otherwise (throw (RuntimeException. "Unknown Action Field Type")))))

(defn- template-parameters
  "Helper function which builds the parameters to the code generation template."
  []
  (let [message-field-params (fn [field-name]
                               {:fieldName (case/->PascalCase (name field-name))
                                :fieldType (message-field-type field-name)})
        message-params (fn [[message-name fields]]
                         {:messageName (case/->PascalCase (name message-name))
                          :fields (map message-field-params
                                       (remove #{:m/entity-id} fields))})
        action-field-params (fn [field-name]
                              {:fieldName (case/->PascalCase (name field-name))
                               :fieldType (action-field-type field-name)})
        action-params (fn [[action-name fields]]
                        {:actionName (case/->PascalCase (name action-name))
                         :fields (map action-field-params fields)})
        get-name (comp case/->PascalCase name)
        enum-value (fn [name] {:name (get-name name)})
        enum-params (fn [set]
                      {:enumName (messages/enum-name-for-set set)
                       :values (map enum-value set)})]

    {:messages (map message-params messages/messages)
     :actions (map action-params messages/actions)
     :enums (map enum-params (enum-sets))}))

(defn- generate!
  "Generates C# code based on the message specifications found in
   `dungeonstrike.messages` and outputs it to the configured output file."
  []
  (let [output (templates/render template (template-parameters))]
    (spit paths/code-generator-output-path output)))

(mount/defstate ^:private code-generator :start (generate!))
