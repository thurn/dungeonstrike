using DungeonStrike.Source.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace DungeonStrike.Source.Messaging
{
    /// <summary>
    /// Base class of all generated Actions. Actions are values which are sent from the client to the driver when
    /// user input occurs. Actions are specified in `messages.clj` and code is generated by `code_generator.clj`
    /// to created a strongly-typed interface for each input object.
    /// </summary>
    public abstract class UserAction
    {
        public string ActionId { get; }

        public string ActionType { get; }

        protected UserAction(string inputType)
        {
            ActionId = IdGenerator.NewActionId();
            ActionType = inputType;
        }

        public override string ToString()
        {
            return "<[" + ActionType + "] " + ActionId + ">";
        }

        public string ToJson()
        {
            var settings = new JsonSerializerSettings {NullValueHandling = NullValueHandling.Ignore};
            settings.Converters.Add(new StringEnumConverter());
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <see cref="object.Equals(object)" />
        public override bool Equals(object obj)
        {
            return Equals(obj as UserAction);
        }

        /// <see cref="object.Equals(object)" />
        public bool Equals(UserAction obj)
        {
            return obj != null && ActionId.Equals(obj.ActionId);
        }

        /// <see cref="object.GetHashCode()" />
        public override int GetHashCode()
        {
            return ActionId.GetHashCode();
        }
    }
}