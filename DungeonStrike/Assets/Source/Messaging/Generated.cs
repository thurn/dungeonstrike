using System;
using System.Collections.Generic;

// =============================================================================
// WARNING: Do not modify this file by hand! This file is automatically
// generated by 'code_generator.clj' on driver startup from the message
// specifications found in 'messages.clj'. Refer to the documentation in those
// files for more information.
// =============================================================================

namespace DungeonStrike.Source.Messaging
{
    public enum PrefabName
    {
        Soldier,
    }

    public enum SceneName
    {
        Empty,
        Flat,
    }

    public enum MaterialName
    {
        SoldierGorka,
        SoldierDesert,
        SoldierHelmetGreen,
        SoldierJungle,
        Soldier02BodyGorka,
        SoldierVestBlack,
        SoldierSurpat,
        Soldier02HelmetKhaki,
        SoldierForest,
        Soldier02BagsKhaki,
        Soldier02VestKhaki,
        SoldierVestGreen,
        SoldierBagsBlack,
        SoldierHelmetKhaki,
        SoldierBagsGreen,
        SoldierVestKhaki,
        SoldierBagsKhaki,
        SoldierWinter,
        SoldierHelmetBlack,
        SoldierBlack,
    }

    public struct MaterialUpdate
    {
        public string EntityChildPath;
        public MaterialName MaterialName;
    }

    public struct Position
    {
        public int X;
        public int Y;
    }

    public sealed class TestMessage : Message
    {
        public static readonly string Type = "Test";

        public TestMessage() : base("Test")
        {
        }

        public SceneName SceneName { get; set; }
    }

    public sealed class LoadSceneMessage : Message
    {
        public static readonly string Type = "LoadScene";

        public LoadSceneMessage() : base("LoadScene")
        {
        }

        public SceneName SceneName { get; set; }
    }

    public sealed class QuitGameMessage : Message
    {
        public static readonly string Type = "QuitGame";

        public QuitGameMessage() : base("QuitGame")
        {
        }

    }

    public sealed class CreateEntityMessage : Message
    {
        public static readonly string Type = "CreateEntity";

        public CreateEntityMessage() : base("CreateEntity")
        {
        }

        public string NewEntityId { get; set; }
        public PrefabName PrefabName { get; set; }
        public Position Position { get; set; }
        public List<MaterialUpdate> MaterialUpdates { get; set; }
    }

    public sealed class DestroyEntityMessage : Message
    {
        public static readonly string Type = "DestroyEntity";

        public DestroyEntityMessage() : base("DestroyEntity")
        {
        }

    }

    public sealed class MoveToPositionMessage : Message
    {
        public static readonly string Type = "MoveToPosition";

        public MoveToPositionMessage() : base("MoveToPosition")
        {
        }

        public Position Position { get; set; }
    }

    public sealed class ShowMoveSelectorMessage : Message
    {
        public static readonly string Type = "ShowMoveSelector";

        public ShowMoveSelectorMessage() : base("ShowMoveSelector")
        {
        }

        public List<Position> Positions { get; set; }
    }

    public sealed class ClientConnectedAction : UserAction
    {
        public static readonly string Type = "ClientConnected";

        public ClientConnectedAction() : base("ClientConnected")
        {
        }

        public string ClientLogFilePath { get; set; }
        public string ClientId { get; set; }
    }

    public sealed class Messages
    {
        public static Message EmptyMessageForType(string messageType)
        {
            switch (messageType)
            {
                case "Test":
                    return new TestMessage();
                case "LoadScene":
                    return new LoadSceneMessage();
                case "QuitGame":
                    return new QuitGameMessage();
                case "CreateEntity":
                    return new CreateEntityMessage();
                case "DestroyEntity":
                    return new DestroyEntityMessage();
                case "MoveToPosition":
                    return new MoveToPositionMessage();
                case "ShowMoveSelector":
                    return new ShowMoveSelectorMessage();
                default:
                    throw new InvalidOperationException(
                        "Unrecognized message type: " + messageType);
            }
        }
    }
}