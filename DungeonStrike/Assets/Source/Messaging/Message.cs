using Newtonsoft.Json;

namespace DungeonStrike.Source.Messaging
{
    /// <summary>
    /// Represents an abstract object position as used by the driver. Should be translated to a 'real'
    /// GameObject position before being used by the client UI.
    /// </summary>
    public struct Position
    {
        public int X;
        public int Y;
    }

    /// <summary>
    /// Base class for all generated Messages. The set of possible messages are specified in 'messages.clj', and
    /// code is generated by 'code_generator.clj' to create a strongly-typed interface for each message object.
    /// </summary>
    public abstract class Message
    {
        /// <summary>
        /// Unique identifier for this message.
        /// </summary>
        public string MessageId { get; set; }

        /// <summary>
        /// ID of Entity which should consume this message, or null if this message is not scoped to any particular
        /// entity.
        /// </summary>
        public string EntityId { get; set; }

        /// <summary>
        /// Type of this message, used to determine how to deserialize it.
        /// </summary>
        public string MessageType { get; set; }

        public override string ToString()
        {
            return JsonConvert.SerializeObject(this);
        }

        /// <see cref="object.Equals(object)" />
        public override bool Equals(object obj)
        {
            return Equals(obj as Message);
        }

        /// <see cref="object.Equals(object)" />
        public bool Equals(Message obj)
        {
            return obj != null && ToString().Equals(obj.ToString());
        }

        /// <see cref="object.GetHashCode()" />
        public override int GetHashCode()
        {
            return ToString().GetHashCode();
        }
    }
}